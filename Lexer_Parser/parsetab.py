
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DIVIDE DOUBLE_VAL LPAREN MINUS NUMBER PLUS RPAREN TIMESexpression : expression PLUS termexpression : termterm : term TIMES factorexpression : expression MINUS termterm : term DIVIDE factorterm : factorfactor : NUMBERfactor : DOUBLE_VALfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'RPAREN':([1,2,4,6,9,12,13,14,15,16,],[-2,-7,-6,-8,14,-5,-3,-9,-1,-4,]),'DIVIDE':([1,2,4,6,12,13,14,15,16,],[7,-7,-6,-8,-5,-3,-9,7,7,]),'NUMBER':([0,3,7,8,10,11,],[2,2,2,2,2,2,]),'TIMES':([1,2,4,6,12,13,14,15,16,],[8,-7,-6,-8,-5,-3,-9,8,8,]),'PLUS':([1,2,4,5,6,9,12,13,14,15,16,],[-2,-7,-6,10,-8,10,-5,-3,-9,-1,-4,]),'LPAREN':([0,3,7,8,10,11,],[3,3,3,3,3,3,]),'$end':([1,2,4,5,6,12,13,14,15,16,],[-2,-7,-6,0,-8,-5,-3,-9,-1,-4,]),'MINUS':([1,2,4,5,6,9,12,13,14,15,16,],[-2,-7,-6,11,-8,11,-5,-3,-9,-1,-4,]),'DOUBLE_VAL':([0,3,7,8,10,11,],[6,6,6,6,6,6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'term':([0,3,10,11,],[1,1,15,16,]),'expression':([0,3,],[5,9,]),'factor':([0,3,7,8,10,11,],[4,4,12,13,4,4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','parser_rules2.py',5),
  ('expression -> term','expression',1,'p_expression_term','parser_rules2.py',9),
  ('term -> term TIMES factor','term',3,'p_term_times','parser_rules2.py',13),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','parser_rules2.py',17),
  ('term -> term DIVIDE factor','term',3,'p_term_divide','parser_rules2.py',21),
  ('term -> factor','term',1,'p_term_factor','parser_rules2.py',28),
  ('factor -> NUMBER','factor',1,'p_factor_num','parser_rules2.py',32),
  ('factor -> DOUBLE_VAL','factor',1,'p_factor_double','parser_rules2.py',36),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','parser_rules2.py',40),
]
